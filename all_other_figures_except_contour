import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import camb
from scipy.interpolate import interp1d

# ---Parameters---
# These parameters are constant across all simulations
h, omegabh2, omegach2 = 0.6756, 0.022, 0.12
As, ns = 2.215e-9, 0.962
tau = 0.0544
YHe = 0.246
TCMB = 2.7255
num_nu_massless = 3.044
num_nu_massive = 0
nu_mass_degeneracies = [0]
nu_mass_numbers = [0]

# --- Setup ---

cases = [8, 10, 15, "LCDM"] # Initial values for the scalar field phi, including a Lambda CDM case

# Line styles and widths for the models
model_line_widths = [2, 2, 2, 2] # All lines a bit thicker for clarity
model_line_styles = ['-', '--', ':', '-.'] # Distinct line styles for each model, add more according to cases

scale_factor = np.logspace(-5, 0, 10_000)


# --- CAMB ---
def get_camb_results(case_value):
    """
    Sets up CAMB parameters and runs the simulation for a given cosmological case. Implementation of initial field
    velocity will be implemented in the future. Currently its initial value is fixed at 0 for all cases except LCDM.

    Args:
        case_value (int or str): The initial value of phi_i or "LCDM".

    Returns:
        camb.model.CAMBdata: The CAMB results object.
    """
    common_params = dict(
        H0=100*h, ombh2=omegabh2, omch2=omegach2, TCMB=TCMB,
        omnuh2=0, num_nu_massless=num_nu_massless, num_nu_massive=0,
        nu_mass_degeneracies=nu_mass_degeneracies, nu_mass_numbers=nu_mass_numbers,
        As=As, ns=ns, tau=tau, YHe=YHe, WantTransfer=True
    )

    if case_value == "LCDM":
        cosmo = camb.set_params(dark_energy_model='fluid', **common_params)
    else:
        # Hybrid Quintessence model with fixed alpha=1.0 and phi_prime_i=0
        cosmo = camb.set_params(
            dark_energy_model='HybridQuintessence', phi_i=case_value,
            alpha=1.0, phi_prime_i=0, # Assuming phi_prime_i is fixed at 0 for these cases
            **common_params
        )

    cosmo.NonLinear = camb.model.NonLinear_none # No non-linear corrections
    return camb.get_results(cosmo)


# --- Plotting Equation of State Evolution (Separate plot, not combined) ---
# This function is not used in the combined figure due to different parameter variations.
def plot_equation_of_state_evolution(phi_prime_grid_values, alphas_values, scale_factor_array):
    """
    Plots the evolution of w_phi and w_eff for different alpha and phi_prime_i values.
    This plot is separate due to its distinct parameter variations (phi_prime_i, alpha).
    """
    fig, axes = plt.subplots(1, 3, figsize=(18, 5), sharey=True)

    for i, (ax, phi_prime_i) in enumerate(zip(axes, phi_prime_grid_values)):
        results_for_alphas = []
        for alpha in alphas_values:
            cosmo = camb.set_params(
                H0=100*h, ombh2=omegabh2, omch2=omegach2, TCMB=TCMB,
                dark_energy_model='HybridQuintessence',
                phi_i=10, alpha=alpha, phi_prime_i=phi_prime_i,
                omnuh2=0, num_nu_massless=num_nu_massless, num_nu_massive=0,
                nu_mass_degeneracies=nu_mass_degeneracies, nu_mass_numbers=[0],
                As=As, ns=ns, tau=tau, YHe=0.246, WantTransfer=True)
            cosmo.NonLinear = camb.model.NonLinear_none
            results_for_alphas.append(camb.get_results(cosmo))

        labels_alpha = [fr"$\alpha = {a}$" for a in alphas_values]
        colors = ['tab:red', 'tab:green', 'tab:purple']

        for result, lbl, cor in zip(results_for_alphas, labels_alpha, colors):
            rhos = result.get_background_densities(scale_factor_array)
            H = scale_factor_array * result.h_of_z(1/scale_factor_array - 1)
            _, w_de = result.get_dark_energy_rho_w(scale_factor_array)

            rho_de = rhos['de'] / scale_factor_array**4
            rho_cdm = rhos['cdm'] / scale_factor_array**4
            de = result.Params.DarkEnergy
            phi = interp1d(de.sampled_a, de.phi_a)(scale_factor_array)
            phi_prime = interp1d(de.sampled_a, de.phidot_a)(scale_factor_array)

            w_eff = w_de + de.alpha * phi_prime * rho_cdm / (phi * 3 * H * rho_de)

            ax.semilogx(scale_factor_array, w_de, label=lbl, color=cor)
            ax.semilogx(scale_factor_array, w_eff, ls='--', color=cor)

        # Aesthetics
        ax.axhline(y=-1, color='gray', ls='--', lw=1)
        ax.set_title(r"$\phi_i'"+ f"= {phi_prime_i}"+ r"~M_{pl}^2$", fontsize=13)
        ax.grid(True, which="both", ls="--", c='0.7')

        # Set x-label only for the middle plot (index 1)
        if i == 1:
            ax.set_xlabel(r"$a$", fontsize=12)
        else:
            ax.set_xlabel('')

        # Add annotation to the third plot (index 2)
        if i == 2:
            ax.annotate(r"Turning Point of $\phi$, EPC!",
                        xy=(1.25e-4, 0.0),
                        xytext=(0.005, 0.8),
                        textcoords='data',
                        arrowprops=dict(facecolor='black', shrink=0.05, width=1.5, headwidth=8),
                        horizontalalignment='left',
                        verticalalignment='center',
                        fontsize=10,
                        color='red',
                        bbox=dict(boxstyle="round,pad=0.3", fc="yellow", ec="red", lw=0.5, alpha=0.7)
                       )

    # Shared y-axis settings
    axes[0].set_ylabel(r"$w$", fontsize=12)
    axes[0].set_ylim([-1.4, 1.4])

    # First legend (colors / Î±)
    leg_alpha = axes[0].legend(loc='lower left', fontsize=11)
    axes[0].add_artist(leg_alpha)

    # Second legend (line styles)
    custom_lines_w_phi = [mpl.lines.Line2D([0], [0], color='black', lw=1, ls='-'),
                          mpl.lines.Line2D([0], [0], color='black', lw=1, ls='--')]
    axes[0].legend(custom_lines_w_phi, [r"$w_\phi$", r"$w_\mathrm{eff}$"],
                   loc='upper right', fontsize=11)

    plt.tight_layout()
    plt.show()


# --- Plotting Relative Densities of All Species ---
def plot_relative_densities(ax, all_results, sf_array, cases_labels, ls_styles, lw_widths):
    """
    Plots the relative energy densities (Omega) for different cosmological models on a given axes.
    """
    fluid_colors = {
        'de': 'tab:red',
        'cdm': 'tab:green',
        'baryon': 'tab:purple',
        'radiation': 'tab:blue' # Combined photon + neutrino
    }
    fluid_labels = {
        'de': r"$\Omega_{DE}$",
        'cdm': r"$\Omega_{CDM}$",
        'baryon': r"$\Omega_b$",
        'radiation': r"$\Omega_r$"
    }

    # Plot against log10(a)
    log_sf_array = np.log10(sf_array)

    for i, (case, result) in enumerate(zip(cases_labels, all_results)):
        current_ls = ls_styles[i]
        current_lw = lw_widths[i]

        rhos = result.get_background_densities(sf_array)
        radiation_density = (rhos['photon'] + rhos['neutrino'])

        ax.plot(log_sf_array, rhos['de']/rhos['tot'], color=fluid_colors['de'], ls=current_ls, lw=current_lw)
        ax.plot(log_sf_array, rhos['cdm']/rhos['tot'], color=fluid_colors['cdm'], ls=current_ls, lw=current_lw)
        ax.plot(log_sf_array, rhos['baryon']/rhos['tot'], color=fluid_colors['baryon'], ls=current_ls, lw=current_lw)
        ax.plot(log_sf_array, radiation_density/rhos['tot'], color=fluid_colors['radiation'], ls=current_ls, lw=current_lw)

    # --- Create the "Models" Legend ---
    custom_model_lines = []
    model_legend_labels = []
    for i, case in enumerate(cases_labels):
        model_label = fr"$\phi_i = {case}$" if case != "LCDM" else r"$\Lambda CDM$"
        custom_model_lines.append(mpl.lines.Line2D([0], [0], color='gray', lw=lw_widths[i], ls=ls_styles[i]))
        model_legend_labels.append(model_label)

    leg_models = ax.legend(custom_model_lines, model_legend_labels,
                           loc='upper left', fontsize=8) # Adjusted font size
    ax.add_artist(leg_models)

    # --- Create the "Fluid Species" Legend ---
    custom_fluid_lines = [
        mpl.lines.Line2D([0], [0], color=fluid_colors['de'], lw=2, ls='-'),
        mpl.lines.Line2D([0], [0], color=fluid_colors['cdm'], lw=2, ls='-'),
        mpl.lines.Line2D([0], [0], color=fluid_colors['baryon'], lw=2, ls='-'),
        mpl.lines.Line2D([0], [0], color=fluid_colors['radiation'], lw=2, ls='-')
    ]
    leg_fluids = ax.legend(custom_fluid_lines, list(fluid_labels.values()),
                           loc='upper right', fontsize=8) # Adjusted font size


    ax.set_xlabel(r"$\log_{10}(a)$", fontsize=12)
    ax.set_ylabel(r"$\Omega$", fontsize=12)
    ax.grid(True, which="both", ls="--", c='0.7')
    ax.set_ylim([1e-6, 1.1])
    ax.set_title('') # Erased title


# --- Plotting Log Ratio of Dark Energy Densities ---
def plot_dark_energy_ratio(ax, all_results, sf_array, cases_labels, ls_styles, lw_widths):
    """
    Plots the logarithm of the ratio of dark energy density (phi) to Lambda CDM dark energy density
    on a given axes.
    """
    # Find the LCDM result
    lcdm_result = None
    for case, result in zip(cases_labels, all_results):
        if case == "LCDM":
            lcdm_result = result
            break

    if lcdm_result is None:
        raise ValueError("LCDM case not found in 'cases' list. Cannot calculate ratio to Lambda CDM.")

    rhos_lcdm_full = lcdm_result.get_background_densities(sf_array)
    rho_lambda_series = rhos_lcdm_full['de']

    # Plot against log10(a)
    log_sf_array = np.log10(sf_array)

    for i, (case, result) in enumerate(zip(cases_labels, all_results)):
        if case != "LCDM": # Only plot Hybrid Quintessence models
            current_ls = ls_styles[i]
            current_lw = lw_widths[i]
            model_label = fr"$\phi_i = {case}$"

            rhos_hq = result.get_background_densities(sf_array)
            rho_phi_series = rhos_hq['de']

            ratio = rho_phi_series / (rho_lambda_series)
            log_ratio = np.log10(ratio)

            ax.plot(log_sf_array, log_ratio, ls=current_ls, lw=current_lw, label=model_label)

    ax.axhline(y=0, color='gray', linestyle='--', lw=1.5, label=r"$\rho_\phi / \rho_\Lambda = 1$ ($\Lambda CDM$)")

    ax.set_xlabel('') # Hidden x-label
    ax.tick_params(labelbottom=False) # Hide x-axis tick labels 
    ax.set_ylabel(r"$\log_{10}(\rho_\phi / \rho_\Lambda)$", fontsize=12)
    ax.set_title('') # Erased title
    ax.grid(True, which="both", ls="--", c='0.7')
    ax.legend(loc='upper right', fontsize=7) # Adjusted font size


# --- Plotting Difference in Conformal Hubble Parameter ---
def plot_conformal_hubble_difference(ax, all_results, sf_array, cases_labels, ls_styles, lw_widths):
    """
    Computes and plots the relative difference in conformal Hubble parameter (Delta H / H_LCDM)
    on a given axes, displaying only positive values.
    """
    lcdm_result = None
    for case, result in zip(cases_labels, all_results):
        if case == "LCDM":
            lcdm_result = result
            break

    if lcdm_result is None:
        raise ValueError("LCDM case not found in 'cases' list. Cannot calculate ratio to Lambda CDM.")

    H_lcdm = lcdm_result.h_of_z(1/sf_array - 1) * 100
    H_conformal_lcdm = sf_array * H_lcdm

    # Plot against log10(a)
    log_sf_array = np.log10(sf_array)

    # Find the maximum positive value for y-axis limit to ensure all positive data is visible
    max_delta_H = 0.0
    for i, (case, result) in enumerate(zip(cases_labels, all_results)):
        if case != "LCDM":
            H_hq = result.h_of_z(1/sf_array - 1) * 100
            H_conformal_hq = sf_array * H_hq
            delta_H_conformal_div_H_conformal_lcdm = (H_conformal_hq - H_conformal_lcdm) / \
                                                     (H_conformal_lcdm + np.finfo(float).eps)
            max_delta_H = max(max_delta_H, np.max(delta_H_conformal_div_H_conformal_lcdm))


    for i, (case, result) in enumerate(zip(cases_labels, all_results)):
        if case != "LCDM":
            current_ls = ls_styles[i]
            current_lw = lw_widths[i]
            model_label = fr"$\phi_i = {case}$"

            H_hq = result.h_of_z(1/sf_array - 1) * 100
            H_conformal_hq = sf_array * H_hq

            delta_H_conformal_div_H_conformal_lcdm = (H_conformal_hq - H_conformal_lcdm) / \
                                                     (H_conformal_lcdm + np.finfo(float).eps)

            ax.plot(log_sf_array, delta_H_conformal_div_H_conformal_lcdm, ls=current_ls, lw=current_lw, label=model_label)

    ax.axhline(y=0, color='gray', linestyle='--', lw=1.5, label=r"$\Delta \mathcal{H} / \mathcal{H}_{\Lambda CDM} = 0$")

    ax.set_xlabel(r"$\log_{10}(a)$", fontsize=12) # Common x-label for this plot
    ax.set_ylabel(r"$\Delta \mathcal{H} / \mathcal{H}_{\Lambda CDM}$", fontsize=12)
    ax.set_title('') # Erased title
    ax.grid(True, which="both", ls="--", c='0.7')
    ax.legend(loc='upper right', fontsize=7) # Adjusted font size

    # Set y-limits to display only positive values
    ax.set_ylim([0, max_delta_H * 1.1])


# --- Main Execution Block ---
if __name__ == "__main__":
    # --- Calculate CAMB results for all cases ---
    print("Calculating CAMB results for all cosmological models...")
    all_results = [get_camb_results(case) for case in cases]
    print("CAMB calculations complete.")

    # --- Create the combined figure using subplot_mosaic ---
    # Layout: Fractional densities on the left, DE ratio on top right, Hubble diff on bottom right.
    # Adjusted figsize to make it suitable for three plots in a 2x2 layout.
    fig, axes_dict = plt.subplot_mosaic(
        [['relative_densities', 'de_ratio_plot'],
         ['relative_densities', 'conformal_hubble_diff_plot']],
        figsize=(10, 8) # Adjusted figsize for a shorter paper-friendly size
    )

    # --- Plot on the assigned axes ---
    print("\nGenerating combined plot...")

    plot_relative_densities(axes_dict['relative_densities'], all_results, scale_factor,
                            cases, model_line_styles, model_line_widths)

    plot_dark_energy_ratio(axes_dict['de_ratio_plot'], all_results, scale_factor,
                           cases, model_line_styles, model_line_widths)

    # Call the Conformal Hubble Difference plot function
    plot_conformal_hubble_difference(axes_dict['conformal_hubble_diff_plot'], all_results, scale_factor,
                                     cases, model_line_styles, model_line_widths)


    # Set common x-label for the entire figure, positioned at the bottom center.
    # This overrides individual x-labels from plotting functions.
    fig.supxlabel(r"$\log_{10}(a)$", fontsize=14)

    # Hide individual x-labels for all subplots (except the bottom-most ones if `sharex` was used)
    # Since `fig.supxlabel` is used, we explicitly hide them.
    axes_dict['relative_densities'].set_xlabel('')
    axes_dict['de_ratio_plot'].set_xlabel('') # Already empty, but explicit for clarity
    axes_dict['conformal_hubble_diff_plot'].set_xlabel('')


    # Adjust layout to prevent overlaps
    plt.tight_layout(rect=[0, 0.03, 1, 0.98]) # Adjusted rect to make space for supxlabel/suptitle
    plt.show()

    # --- Generate separate figure for Equations of State ---
    print("\nGenerating Equation of State Evolution plot (separate figure)...")

    phi_prime_grid_eoss = [-130, 0, 130]  # Different initial derivatives of phi
    alphas_eoss = [0.1, 0.5, 1.0]         # Different alpha values to vary the potential

    # Plot the equation of state evolution using dedicated function
    plot_equation_of_state_evolution(phi_prime_grid_eoss, alphas_eoss, scale_factor)
    plt.show()

